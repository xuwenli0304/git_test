1 environment can be autowired, it contains the environment variables, including those from the config file,
  the output looks like:
  ApplicationServletEnvironment {activeProfiles=[], defaultProfiles=[default], 
  propertySources=[MapPropertySource {name='server.ports'}, 
  ConfigurationPropertySourcesPropertySource {name='configurationProperties'}, 
  StubPropertySource {name='servletConfigInitParams'}, 
  ServletContextPropertySource {name='servletContextInitParams'}, 
  PropertiesPropertySource {name='systemProperties'}, 
  OriginAwareSystemEnvironmentPropertySource {name='systemEnvironment'}, 
  RandomValuePropertySource {name='random'}, 
  OriginTrackedMapPropertySource {name='Config resource 'class path resource [application.properties]' via location 'optional:classpath:/''}]}

2 applicationcontext can also be autowired, with it we can get all the bean names created

3 if we do not put componetscan on the starter class, our self-defined beans will not be created 

4 we can use spring expression language to dynamically load config from config files.

5 if User class implements BeanFactoryAware, a circular dependency problem will be thrown, currectly
  i do not know why.